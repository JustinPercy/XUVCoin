Copyright (c) 2009-2012 Bitcoin Developers
Copyright (c) 2019 Profit Hunters Coin
Distributed under the MIT/X11 software license, see the accompanying
file license.txt or http://www.opensource.org/licenses/mit-license.php.
This product includes software developed by the OpenSSL Project for use in
the OpenSSL Toolkit (http://www.openssl.org/).  This product includes
cryptographic software written by Eric Young (eay@cryptsoft.com) and UPnP
software written by Thomas Bernard.


TERMUX BUILD NOTES (ANDROID)
================================================

Requirements
----------------------------------------------
https://termux.com  (Available through Google Play Store)


Dependencies (Install with package manager)
----------------------------------------------
apt update
apt upgrade
apt install make
apt install boost-dev
apt install git
apt install g++
apt install openssl-dev
apt install libdb
apt install libdb-dev
apt install automake
apt install build-essential
apt inatall libllvm-dev
apt install libcurl-dev
apt install attr
apt install libcrypt-dev
apt install libcln
apt install miniupnpc
apt install miniupnpc-dev
apt install libprotobuf-dev
apt install leveldb
apt install leveldb-dev
apt install sqlite
apt install libsqlite3-dev
apt install libandroid-shmem
apt install libandroid-shmem-dev
apt install libc*
apt install proot



Dependency: Berkely DB (Manual compile)
----------------------------------------------

cd

wget https://download.oracle.com/otn/berkeley-db/db-18.1.32.tar.gz

tar -xzvf db-18.1.32.tar.gz

cd db-18.1.32

cd build_android

../dist/configure --enable-cxx

make

termux-chroot make install

cd



Dependency: LevelDB (Manual install)
----------------------------------------------
cd phc/src

cd leveldb

wget https://github.com/profithunterscoin/android_depends_phc/blob/master/libleveldb.a?raw=true

wget https://github.com/profithunterscoin/android_depends_phc/blob/master/libmemenv.a?raw=true

cd ..


Dependency: LevelDB (Manual compile)
----------------------------------------------

cd phc/src

mv leveldb leveldb-old
 
git clone https://github.com/google/leveldb

cd leveldb

chmod 755 * -R

cd benchmarks

nano db_bench_sqlite3.cc

edit:   #include <sqlite3.h>  to #include "sqlite3.h"

mkdir -p build && cd build

wget https://raw.githubusercontent.com/profithunterscoin/android_depends_phc/master/sqlite3.h

cmake -DCMAKE_BUILD_TYPE=Release -DLEVELDB_PLATFORM_POSIX=1 -DLEVELDB_ATOMIC_PRESENT=0 -DHAVE_CRC32C=0 -DHAVE_SNAPPY=0 -O2 -DNDEBUG=1 -DLEVELDB_SHARED_LIBRARY=1 -DLEVELDB_COMPILE_LIBRARY=1 -fPIC . && cmake --build .

ERROR: Doesn't build libmemenv.a

cd ..

wget https://github.com/profithunterscoin/android_depends_phc/blob/master/libmemenv.a?raw=true

cd ..


Prepare to compile: Termux Mods
----------------------------------------------

cd

git clone https://github.com/profithunterscoin/android-ifaddrs

mv /data/data/com.termux/files/usr/include/ifaddrs.h ifaddrs-old.h

cd android-ifaddrs 

cp * /data/data/com.termux/files/usr/include/



Prepare to compile: Grab the source
----------------------------------------------

cd

git clone http://github.com/profithunterscoin/phc



To Build (phcd) Headless daemon
----------------------------------------------

cd phc
git checkout 1.0.0.7-dev
cd src/
make -f makefile.unix


Static Build (phcd) Headless daemon (Release binaries)
----------------------------------------------

Dependency: GMP (Manual compile)
~~~~~~~~~
cd 

git clone https://github.com/profithunterscoin/GMP

cd GMP
./configure
make
termux-chroot make install

cd
cd ..
cd usr/local/include
cp gmp.h ../../../usr/include
cd lib
cp libgmp.a ../../../usr/lib


Dependency: Openssl (Manual compile)
~~~~~~~~~
cd

git clone https://github.com/profithunterscoin/openssl

cd openssl

./config
make
termux-chroot make install

cp libssl.a ../../usr/libssl
cp libcrypto.a ../../usr/lib

cd


Dependency: Miniupnp (Manual compile)
~~~~~~~~~
cd

git clone https://github.com/profithunterscoin/miniupnp

cd miniupnp/miniupnpc

make
termux-chroot make install

cd


Dependency: Boost 1.70 (Manual compile)
~~~~~~~~~
wget https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.bz2

tar xvjf boost_1_70_0.tar.bz2

Fix depends issue:
mv /data/data/com.termux/files/usr/include/python3.7m /data/data/com.termux/files/usr/include/python3.7
mv /data/data/com.termux.files/usr/lib/libpython3.7m.so /data/data/com.termux/files/usr/lib/libpython37.so

home/boost_1_70_0/stage/lib/libboost_python37.so

cd boost_1_70_0

 Install Boost by running the following commands:

termux-chroot ./bootstrap.sh --prefix=/data/data/com.termux/files/usr && ./b2 stage threading=multi link=shared

 Install Boost Libs by running the following commands:

termux-chroot ./bootstrap.sh --prefix=/data/data/com.termux/files/usr && ./b2 stage threading=multi link=static

cd


Build Executable
~~~~~~~~~
cd phc
git checkout 1.0.0.7-dev
cd src/

make STATIC=1 LDFLAGS="-static-libstdc++" -f makefile.unix phcd USE_UPNP=

Or you can also try:

make -f makefile.unix STATIC=1



Security
----------------------------------------------
To help make your PHC installation more secure by making certain attacks impossible to
exploit even if a vulnerability is found, you can take the following measures:

* Position Independent Executable
    Build position independent code to take advantage of Address Space Layout Randomization
    offered by some kernels. An attacker who is able to cause execution of code at an arbitrary
    memory location is thwarted if he doesn't know where anything useful is located.
    The stack and heap are randomly located by default but this allows the code section to be
    randomly located as well.

    On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error
    such as: "relocation R_X86_64_32 against `......' can not be used when making a shared object;"

    To build with PIE, use:
    make -f makefile.unix ... -e PIE=1

    To test that you have built PIE executable, install scanelf, part of paxutils, and use:
    scanelf -e ./phc

    The output should contain:
     TYPE
    ET_DYN

* Non-executable Stack
    If the stack is executable then trivial stack based buffer overflow exploits are possible if
    vulnerable buffers are found. By default, PHC should be built with a non-executable stack
    but if one of the libraries it uses asks for an executable stack or someone makes a mistake
    and uses a compiler extension which requires an executable stack, it will silently build an
    executable without the non-executable stack protection.

    To verify that the stack is non-executable after compiling use:
    scanelf -e ./phc

    the output should contain:
    STK/REL/PTL
    RW- R-- RW-

    The STK RW- means that the stack is readable and writeable but not executable.



